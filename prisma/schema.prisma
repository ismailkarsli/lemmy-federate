// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Instance {
  id               Int               @id @default(autoincrement())
  host             String            @unique /// @format hostname
  enabled          Boolean           @default(false)
  nsfw             NSFW              @default(BLOCK)
  fediseer         FediseerUsage     @default(BLACKLIST_ONLY)
  auto_add         Boolean           @default(true)
  software         String
  client_id        String?
  client_secret    String?
  cross_software   Boolean           @default(true)
  mode             Mode              @default(FULL)
  communities      Community[]
  allowedBy        Instance[]        @relation("InstanceAllows")
  allowed          Instance[]        @relation("InstanceAllows")
  blockedBy        Instance[]        @relation("InstanceBlocks")
  blocked          Instance[]        @relation("InstanceBlocks")
  users            User[]
  communityFollows CommunityFollow[]
  approved         Boolean           @default(true)
}

model User {
  id         Int      @id @default(autoincrement())
  username   String
  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  code       String
  codeExp    DateTime

  @@unique([username, instanceId])
}

model Community {
  id         Int               @id @default(autoincrement())
  name       String
  instance   Instance          @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId Int
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now()) @updatedAt
  follows    CommunityFollow[]

  @@unique([name, instanceId])
}

model CommunityFollow {
  id          Int                   @id @default(autoincrement())
  instance    Instance              @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId  Int
  community   Community             @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @default(now()) @updatedAt
  status      CommunityFollowStatus @default(WAITING)

  @@unique([instanceId, communityId])
}

enum FediseerUsage {
  NONE
  BLACKLIST_ONLY
  WHITELIST_ONLY
}

enum NSFW {
  ALLOW
  BLOCK
  ONLY
}

enum CommunityFollowStatus {
  FEDERATED_BY_USER /// A user is followed from remote instance. Bot can unsubscribe.
  FEDERATED_BY_BOT /// Bot is subscribed and waiting for other users.
  IN_PROGRESS /// Bot is subscribed but can't determine if it should unsubscribe because there is no local subscribe count.
  WAITING /// Waiting to process. Default status.
  ERROR /// Errored. Retry later.
  NOT_ALLOWED /// One instance does not allow the other.
  NOT_AVAILABLE /// instance is not enabled. Just skip.
}

enum Software {
  LEMMY
  MBIN
  DCH_BLOG
}

enum Mode {
  FULL
  SEED
  LEECH
}
